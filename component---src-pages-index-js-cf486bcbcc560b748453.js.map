{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["nodes","query","map","edge","node","IndexPage","data","ploneDocument","images","files","style","background","ploneSite","title"],"mappings":"0FAAA,4FAOMA,EAAQ,SAAAC,GAAK,OAAKA,EAAQA,EAAK,MAAY,IAAIC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,SAmBvDC,UAjBG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEA,KAAMA,EAAKC,cACXC,OAAQR,EAAMM,EAAI,eAClBG,MAAOT,EAAMM,EAAI,gBAEnB,wBAAII,MAAO,CAAEC,WAAY,aACzB,kBAAC,IAAD,CACEL,KAAMA,EAAKM,UACXC,MAAM,WACNL,OAAQR,EAAMM,EAAI,mBAClBG,MAAOT,EAAMM,EAAI,sBAOhB,IAAML,EAAK","file":"component---src-pages-index-js-cf486bcbcc560b748453.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport Document from '../components/Document';\nimport Folder from '../components/Folder';\n\nconst nodes = query => (query ? query['edges'] : []).map(edge => edge.node);\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <Document\n      data={data.ploneDocument}\n      images={nodes(data['allPloneImage'])}\n      files={nodes(data['allPloneFile'])}\n    />\n    <hr style={{ background: '#e8eef2' }} />\n    <Folder\n      data={data.ploneSite}\n      title=\"Contents\"\n      images={nodes(data['allSitePloneImage'])}\n      files={nodes(data['allSitePloneFile'])}\n    />\n  </Layout>\n);\n\nexport default IndexPage;\n\nexport const query = graphql`\n  query IndexPageQuery {\n    ploneDocument(_path: { in: [\"/frontpage/\", \"/front-page/\"] }) {\n      ...Document\n    }\n    allPloneFile(\n      filter: { _backlinks: { in: [\"/frontpage/\", \"/front-page/\"] } }\n    ) {\n      edges {\n        node {\n          ...File\n        }\n      }\n    }\n    allPloneImage(\n      filter: { _backlinks: { in: [\"/frontpage/\", \"/front-page/\"] } }\n    ) {\n      edges {\n        node {\n          ...Image\n        }\n      }\n    }\n    ploneSite(_path: { eq: \"/\" }) {\n      ...Site\n    }\n    allSitePloneFile: allPloneFile(filter: { _backlinks: { eq: \"/\" } }) {\n      edges {\n        node {\n          ...File\n        }\n      }\n    }\n    allSitePloneImage: allPloneImage(filter: { _backlinks: { eq: \"/\" } }) {\n      edges {\n        node {\n          ...Image\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}